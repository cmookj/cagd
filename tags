!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combine/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/me/Documents/develop/cweb/cagd/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/2aa034a/
$(CPP_SRC)	Makefile	/^$(CPP_SRC): $(CWEB_FILE)$/;"	t
$(OBJS)	test_linux/Makefile	/^$(OBJS) : $(SRCS) $(HDRS)$/;"	t
$(TARGET)	test_linux/Makefile	/^$(TARGET): $(OBJS)$/;"	t
$(TARGET_PDF)	Makefile	/^$(TARGET_PDF): $(TEX_FILE)$/;"	t
$(TEX_FILE)	Makefile	/^$(TEX_FILE): $(CWEB_FILE)$/;"	t
0E453BEA1D957AB000859597	cagd_test/cagd_test.xcodeproj/xcuserdata/cmookj.xcuserdatad/xcschemes/xcschememanagement.plist	/^		<key>0E453BEA1D957AB000859597<\/key>$/;"	k	key:SuppressBuildableAutocreation
CC	test_linux/Makefile	/^CC          = g++$/;"	m
CFLAGS	test_linux/Makefile	/^CFLAGS      = -O2 -g -fPIC -std=c++11$/;"	m
CPP_HEADER	Makefile	/^CPP_HEADER = $(PRGM:.w=.h)$/;"	m
CPP_SRC	Makefile	/^CPP_SRC = $(PRGM:.w=.cpp) test.cpp$/;"	m
CWEB_FILE	Makefile	/^CWEB_FILE = cagd.w \\$/;"	m
EPS	cagd.h	/^const double EPS= 2.2204e-16;$/;"	v	namespace:cagd	typeref:typename:const double
HDRS	test_linux/Makefile	/^HDRS        = ..\/cagd.h$/;"	m
IDEDidComputeMac32BitWarning	cagd_test/cagd_test.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist	/^	<key>IDEDidComputeMac32BitWarning<\/key>$/;"	k
INC	test_linux/Makefile	/^INC         = -I\/usr\/include\/nvidia-370\/$/;"	m
LIBS	test_linux/Makefile	/^LIBS        = -L.\/ -L\/usr\/lib\/x86_64-linux-gnu\/$/;"	m
M_PI	cagd.h	/^#define M_PI /;"	d
M_PI_2	cagd.h	/^#define M_PI_2 /;"	d
M_PI_4	cagd.h	/^#define M_PI_4 /;"	d
NOMINMAX	cagd.h	/^#define NOMINMAX$/;"	d
OBJS	test_linux/Makefile	/^OBJS        = cagd.o$/;"	m
PRGM	Makefile	/^PRGM = cagd$/;"	m
SchemeUserState	cagd_test/cagd_test.xcodeproj/xcuserdata/cmookj.xcuserdatad/xcschemes/xcschememanagement.plist	/^	<key>SchemeUserState<\/key>$/;"	k
SchemeUserState	cagd_test/cagd_test.xcodeproj/xcuserdata/me.xcuserdatad/xcschemes/xcschememanagement.plist	/^	<key>SchemeUserState<\/key>$/;"	k
SuppressBuildableAutocreation	cagd_test/cagd_test.xcodeproj/xcuserdata/cmookj.xcuserdatad/xcschemes/xcschememanagement.plist	/^	<key>SuppressBuildableAutocreation<\/key>$/;"	k
TARGET	test_linux/Makefile	/^TARGET      = libcagd.so$/;"	m
TARGET_CPP	Makefile	/^TARGET_CPP = $(CPP_SRC:.cpp=.o)$/;"	m
TARGET_PDF	Makefile	/^TARGET_PDF = $(TEX_FILE:.tex=.pdf)$/;"	m
TEX_AUX	Makefile	/^TEX_AUX = $(TEX_FILE:.tex=.log) \\$/;"	m
TEX_FILE	Makefile	/^TEX_FILE = cagd.tex$/;"	m
__COMPUTER_AIDED_GEOMETRIC_DESIGN_H_	cagd.h	/^#define __COMPUTER_AIDED_GEOMETRIC_DESIGN_H_$/;"	d
_ctrl_pts	cagd.h	/^vector<point> _ctrl_pts;$/;"	m	class:cagd::curve	typeref:typename:vector<point>
_curves	cagd.h	/^vector<bezier> _curves;$/;"	m	class:cagd::piecewise_bezier_curve	typeref:typename:vector<bezier>
_degree	cagd.h	/^unsigned long _degree;$/;"	m	class:cagd::bezier	typeref:typename:unsigned long
_elem	cagd.h	/^vector<double> _elem;$/;"	m	struct:cagd::point	typeref:typename:vector<double>
_interpolate	cagd.cpp	/^void cubic_spline::_interpolate($/;"	f	class:cubic_spline	typeref:typename:void
_kernel_id	cagd.h	/^size_t _kernel_id;$/;"	m	class:cagd::cubic_spline	typeref:typename:size_t
_knot_sqnc	cagd.h	/^vector<double> _knot_sqnc;$/;"	m	class:cagd::cubic_spline	typeref:typename:vector<double>
_mp	cagd.h	/^mutable mpoi _mp;$/;"	m	class:cagd::cubic_spline	typeref:typename:mpoi
all	Makefile	/^all: $(TARGET_PDF) $(CPP_SRC)$/;"	t
all	test_linux/Makefile	/^all: $(TARGET) app$/;"	t
app	test_linux/Makefile	/^app:..\/test.cpp $(TARGET)$/;"	t
bessel	cagd.h	/^bessel,$/;"	e	enum:cagd::cubic_spline::end_condition
bezier	cagd.cpp	/^bezier::bezier(){}$/;"	f	class:bezier
bezier	cagd.cpp	/^bezier::bezier(const bezier&src){$/;"	f	class:bezier
bezier	cagd.cpp	/^bezier::bezier(list<point> points){$/;"	f	class:bezier
bezier	cagd.cpp	/^bezier::bezier(vector<point> points){$/;"	f	class:bezier
bezier	cagd.h	/^class bezier:public curve{$/;"	c	namespace:cagd
bezier_control_points	cagd.cpp	/^cubic_spline::bezier_control_points($/;"	f	class:cubic_spline	typeref:typename:void
bezier_points_from_hermite_form	cagd.cpp	/^cubic_spline::bezier_points_from_hermite_form($/;"	f	class:cubic_spline	typeref:typename:vector<point>
bracket	cagd.cpp	/^cubic_spline::bracket($/;"	f	class:cubic_spline	typeref:typename:double
cagd	cagd.h	/^namespace cagd{$/;"	n
cagd_test.xcscheme	cagd_test/cagd_test.xcodeproj/xcuserdata/cmookj.xcuserdatad/xcschemes/xcschememanagement.plist	/^		<key>cagd_test.xcscheme<\/key>$/;"	k	key:SchemeUserState
cagd_test.xcscheme_^#shared#^_	cagd_test/cagd_test.xcodeproj/xcuserdata/me.xcuserdatad/xcschemes/xcschememanagement.plist	/^		<key>cagd_test.xcscheme_^#shared#^_<\/key>$/;"	k	key:SchemeUserState
centripetal	cagd.h	/^centripetal,$/;"	e	enum:cagd::cubic_spline::parametrization
chord_length	cagd.h	/^chord_length,$/;"	e	enum:cagd::cubic_spline::parametrization
clamped	cagd.h	/^clamped,$/;"	e	enum:cagd::cubic_spline::end_condition
clean	Makefile	/^clean:$/;"	t
clean	test_linux/Makefile	/^clean:$/;"	t
close_postscript_file	cagd.cpp	/^void cagd::close_postscript_file(psf&ps_file,bool with_new_page){$/;"	f	class:cagd	typeref:typename:void
const_ctrlpt_itr	cagd.h	/^typedef vector<point> ::const_iterator const_ctrlpt_itr;$/;"	t	class:cagd::curve	typeref:typename:vector<point>::const_iterator
const_curve_itr	cagd.h	/^typedef vector<bezier> ::const_iterator const_curve_itr;$/;"	t	class:cagd::piecewise_bezier_curve	typeref:typename:vector<bezier>::const_iterator
const_knot_itr	cagd.h	/^typedef vector<double> ::const_iterator const_knot_itr;$/;"	t	class:cagd::cubic_spline	typeref:typename:vector<double>::const_iterator
control_points	cagd.cpp	/^cubic_spline::control_points()const{$/;"	f	class:cubic_spline	typeref:typename:vector<point>
control_points_from_bezier_form	cagd.cpp	/^cubic_spline::control_points_from_bezier_form(const vector<point> &b){$/;"	f	class:cubic_spline	typeref:typename:vector<point>
count	cagd.cpp	/^piecewise_bezier_curve::count()const{$/;"	f	class:piecewise_bezier_curve	typeref:typename:size_t
create_postscript_file	cagd.cpp	/^psf cagd::create_postscript_file(string file_name){$/;"	f	class:cagd	typeref:typename:psf
ctrl_pts	cagd.cpp	/^point curve::ctrl_pts(const size_t&i)const{$/;"	f	class:curve	typeref:typename:point
ctrl_pts_size	cagd.cpp	/^size_t curve::ctrl_pts_size()const{$/;"	f	class:curve	typeref:typename:size_t
ctrlpt_itr	cagd.h	/^typedef vector<point> ::iterator ctrlpt_itr;$/;"	t	class:cagd::curve	typeref:typename:vector<point>::iterator
cubic_spline	cagd.cpp	/^cubic_spline::cubic_spline($/;"	f	class:cubic_spline
cubic_spline	cagd.cpp	/^cubic_spline::cubic_spline(const cubic_spline&src)$/;"	f	class:cubic_spline
cubic_spline	cagd.cpp	/^cubic_spline::cubic_spline(const vector<double> &knots,$/;"	f	class:cubic_spline
cubic_spline	cagd.cpp	/^cubic_spline::cubic_spline(const vector<point> &p,$/;"	f	class:cubic_spline
cubic_spline	cagd.h	/^class cubic_spline:public curve{$/;"	c	namespace:cagd
curvature_at_zero	cagd.cpp	/^bezier::curvature_at_zero()const{$/;"	f	class:bezier	typeref:typename:double
curve	cagd.cpp	/^curve::curve(){$/;"	f	class:curve
curve	cagd.cpp	/^curve::curve(const curve&src)$/;"	f	class:curve
curve	cagd.cpp	/^curve::curve(const list<point> &pts)$/;"	f	class:curve
curve	cagd.cpp	/^curve::curve(const vector<point> &pts)$/;"	f	class:curve
curve	cagd.h	/^class curve{$/;"	c	namespace:cagd
curve_itr	cagd.h	/^typedef vector<bezier> ::iterator curve_itr;$/;"	t	class:cagd::piecewise_bezier_curve	typeref:typename:vector<bezier>::iterator
degree	cagd.cpp	/^bezier::degree()const{$/;"	f	class:bezier	typeref:typename:unsigned long
degree	cagd.cpp	/^cubic_spline::degree()const{$/;"	f	class:cubic_spline	typeref:typename:unsigned long
degree	cagd.cpp	/^piecewise_bezier_curve::degree()const{$/;"	f	class:piecewise_bezier_curve	typeref:typename:unsigned long
delta	cagd.cpp	/^double cubic_spline::delta(const long i)const{$/;"	f	class:cubic_spline	typeref:typename:double
derivative	cagd.cpp	/^bezier::derivative(const double t)const{$/;"	f	class:bezier	typeref:typename:point
derivative	cagd.cpp	/^cubic_spline::derivative(const double u)const{$/;"	f	class:cubic_spline	typeref:typename:point
derivative	cagd.cpp	/^piecewise_bezier_curve::derivative(const double u)const{$/;"	f	class:piecewise_bezier_curve	typeref:typename:point
description	cagd.cpp	/^string cubic_spline::description()const{$/;"	f	class:cubic_spline	typeref:typename:string
description	cagd.cpp	/^string curve::description()const{$/;"	f	class:curve	typeref:typename:string
description	cagd.cpp	/^string point::description()const{$/;"	f	class:point	typeref:typename:string
dim	cagd.cpp	/^curve::dim()const{$/;"	f	class:curve	typeref:typename:unsigned long
dim	cagd.cpp	/^piecewise_bezier_curve::dim()const{$/;"	f	class:piecewise_bezier_curve	typeref:typename:unsigned long
dim	cagd.cpp	/^size_t point::dim()const{$/;"	f	class:point	typeref:typename:size_t
dimension	cagd.cpp	/^curve::dimension()const{$/;"	f	class:curve	typeref:typename:unsigned long
dimension	cagd.cpp	/^piecewise_bezier_curve::dimension()const{$/;"	f	class:piecewise_bezier_curve	typeref:typename:unsigned long
dimension	cagd.cpp	/^size_t point::dimension()const{$/;"	f	class:point	typeref:typename:size_t
dist	cagd.cpp	/^double cagd::dist(const point&pt1,const point&pt2){$/;"	f	class:cagd	typeref:typename:double
dist	cagd.cpp	/^point::dist(const point&pt)const{$/;"	f	class:point	typeref:typename:double
elevate_degree	cagd.cpp	/^piecewise_bezier_curve::elevate_degree(const unsigned long dgr){$/;"	f	class:piecewise_bezier_curve	typeref:typename:void
elevate_degree	cagd.cpp	/^void bezier::elevate_degree(unsigned long dgr){$/;"	f	class:bezier	typeref:typename:void
end_condition	cagd.h	/^enum class end_condition{$/;"	g	class:cagd::cubic_spline
evaluate	cagd.cpp	/^bezier::evaluate(const double t)const{$/;"	f	class:bezier	typeref:typename:point
evaluate	cagd.cpp	/^cubic_spline::evaluate(const double u)const{$/;"	f	class:cubic_spline	typeref:typename:point
evaluate	cagd.cpp	/^cubic_spline::evaluate(const double u,unsigned long I)const{$/;"	f	class:cubic_spline	typeref:typename:point
evaluate	cagd.cpp	/^piecewise_bezier_curve::evaluate(const double u)const{$/;"	f	class:piecewise_bezier_curve	typeref:typename:point
evaluate_all	cagd.cpp	/^cubic_spline::evaluate_all(const unsigned N)const{$/;"	f	class:cubic_spline	typeref:typename:vector<point>
factorial	cagd.cpp	/^unsigned long cagd::factorial(unsigned long n){$/;"	f	class:cagd	typeref:typename:unsigned long
find_index_in_knot_sequence	cagd.cpp	/^cubic_spline::find_index_in_knot_sequence(const double u)const{$/;"	f	class:cubic_spline	typeref:typename:size_t
find_index_in_sequence	cagd.cpp	/^cubic_spline::find_index_in_sequence($/;"	f	class:cubic_spline	typeref:typename:size_t
find_l	cagd.cpp	/^cubic_spline::find_l($/;"	f	class:cubic_spline	typeref:typename:double
find_multiplicity	cagd.cpp	/^cubic_spline::find_multiplicity(const double u)const{$/;"	f	class:cubic_spline	typeref:typename:unsigned long
find_multiplicity	cagd.cpp	/^cubic_spline::find_multiplicity(const double u,$/;"	f	class:cubic_spline	typeref:typename:unsigned long
function_spline	cagd.h	/^function_spline$/;"	e	enum:cagd::cubic_spline::parametrization
get_blending_ratio	cagd.cpp	/^cubic_spline::get_blending_ratio($/;"	f	class:cubic_spline	typeref:typename:double
insert_end_knots	cagd.cpp	/^cubic_spline::insert_end_knots(){$/;"	f	class:cubic_spline	typeref:typename:void
insert_knot	cagd.cpp	/^cubic_spline::insert_knot(const double u){$/;"	f	class:cubic_spline	typeref:typename:void
install	test_linux/Makefile	/^install:$/;"	t
invert_tridiagonal	cagd.cpp	/^int cagd::invert_tridiagonal($/;"	f	class:cagd	typeref:typename:int
knot_itr	cagd.h	/^typedef vector<double> ::iterator knot_itr;$/;"	t	class:cagd::cubic_spline	typeref:typename:vector<double>::iterator
knot_sequence	cagd.cpp	/^cubic_spline::knot_sequence()const{$/;"	f	class:cubic_spline	typeref:typename:vector<double>
main	test.cpp	/^int main(int argc,char*argv[]){$/;"	f	typeref:typename:int
multiply	cagd.cpp	/^vector<double> cagd::multiply($/;"	f	class:cagd	typeref:typename:vector<double>
natural	cagd.h	/^natural,$/;"	e	enum:cagd::cubic_spline::end_condition
not_a_knot	cagd.h	/^not_a_knot,$/;"	e	enum:cagd::cubic_spline::end_condition
operator ()	cagd.cpp	/^const double&point::operator()(const size_t&i)const{$/;"	f	class:point	typeref:typename:const double &
operator ()	cagd.cpp	/^double&point::operator()(const size_t&i){$/;"	f	class:point	typeref:typename:double &
operator *	cagd.cpp	/^point cagd::operator*(double s,point pt){$/;"	f	class:cagd	typeref:typename:point
operator *	cagd.cpp	/^point cagd::operator*(point pt,double s){$/;"	f	class:cagd	typeref:typename:point
operator *=	cagd.cpp	/^point&point::operator*= (const double s){$/;"	f	class:point	typeref:typename:point &
operator +	cagd.cpp	/^point cagd::operator+(point pt1,point pt2){$/;"	f	class:cagd	typeref:typename:point
operator +=	cagd.cpp	/^point&point::operator+= (const point&pt){$/;"	f	class:point	typeref:typename:point &
operator -	cagd.cpp	/^point cagd::operator-(point pt1){$/;"	f	class:cagd	typeref:typename:point
operator -	cagd.cpp	/^point cagd::operator-(point pt1,point pt2){$/;"	f	class:cagd	typeref:typename:point
operator -=	cagd.cpp	/^point&point::operator-= (const point&pt){$/;"	f	class:point	typeref:typename:point &
operator /	cagd.cpp	/^point cagd::operator\/(point pt,double s){$/;"	f	class:cagd	typeref:typename:point
operator /=	cagd.cpp	/^point&point::operator\/= (const double s){$/;"	f	class:point	typeref:typename:point &
operator =	cagd.cpp	/^bezier&bezier::operator= (const bezier&src){$/;"	f	class:bezier	typeref:typename:bezier &
operator =	cagd.cpp	/^cubic_spline&cubic_spline::operator= (const cubic_spline&crv){$/;"	f	class:cubic_spline	typeref:typename:cubic_spline &
operator =	cagd.cpp	/^curve&curve::operator= (const curve&crv){$/;"	f	class:curve	typeref:typename:curve &
operator =	cagd.cpp	/^piecewise_bezier_curve::operator= (const piecewise_bezier_curve&crv){$/;"	f	class:piecewise_bezier_curve	typeref:typename:piecewise_bezier_curve &
operator =	cagd.cpp	/^void point::operator= (const point&src){$/;"	f	class:point	typeref:typename:void
orderHint	cagd_test/cagd_test.xcodeproj/xcuserdata/cmookj.xcuserdatad/xcschemes/xcschememanagement.plist	/^			<key>orderHint<\/key>$/;"	k	key:SchemeUserState.cagd_test.xcscheme
orderHint	cagd_test/cagd_test.xcodeproj/xcuserdata/me.xcuserdatad/xcschemes/xcschememanagement.plist	/^			<key>orderHint<\/key>$/;"	k	key:SchemeUserState.cagd_test.xcscheme_^#shared#^_
parametrization	cagd.h	/^enum class parametrization{$/;"	g	class:cagd::cubic_spline
periodic	cagd.h	/^periodic$/;"	e	enum:cagd::cubic_spline::end_condition
piecewise_bezier_curve	cagd.cpp	/^piecewise_bezier_curve::piecewise_bezier_curve(){}$/;"	f	class:piecewise_bezier_curve
piecewise_bezier_curve	cagd.cpp	/^piecewise_bezier_curve::piecewise_bezier_curve(const piecewise_bezier_curve&r)$/;"	f	class:piecewise_bezier_curve
piecewise_bezier_curve	cagd.h	/^class piecewise_bezier_curve:public curve{$/;"	c	namespace:cagd
point	cagd.cpp	/^point::point(const double v1,const double v2,const double v3)$/;"	f	class:point
point	cagd.cpp	/^point::point(const point&src)$/;"	f	class:point
point	cagd.cpp	/^point::point(const size_t n)$/;"	f	class:point
point	cagd.cpp	/^point::point(const size_t n,const double*v)$/;"	f	class:point
point	cagd.cpp	/^point::point(initializer_list<double> v)$/;"	f	class:point
point	cagd.h	/^struct point{$/;"	s	namespace:cagd
primary	cagd_test/cagd_test.xcodeproj/xcuserdata/cmookj.xcuserdatad/xcschemes/xcschememanagement.plist	/^			<key>primary<\/key>$/;"	k	key:SuppressBuildableAutocreation.0E453BEA1D957AB000859597
print_title	test.cpp	/^void print_title(const char*str){$/;"	f	typeref:typename:void
psf	cagd.h	/^using psf= ofstream;$/;"	t	namespace:cagd	typeref:typename:ofstream
push_back	cagd.cpp	/^piecewise_bezier_curve::push_back(bezier crv){$/;"	f	class:piecewise_bezier_curve	typeref:typename:void
quadratic	cagd.h	/^quadratic,$/;"	e	enum:cagd::cubic_spline::end_condition
reduce_degree	cagd.cpp	/^piecewise_bezier_curve::reduce_degree(const unsigned long dgr){$/;"	f	class:piecewise_bezier_curve	typeref:typename:void
reduce_degree	cagd.cpp	/^void bezier::reduce_degree(const unsigned long dgr){$/;"	f	class:bezier	typeref:typename:void
remove_knot	cagd.cpp	/^cubic_spline::remove_knot(const double u){$/;"	f	class:cubic_spline	typeref:typename:void
set_control_points	cagd.cpp	/^cubic_spline::set_control_points($/;"	f	class:cubic_spline	typeref:typename:void
signed_area	cagd.cpp	/^cagd::signed_area(const point p1,const point p2,const point p3){$/;"	f	class:cagd	typeref:typename:double
signed_curvature	cagd.cpp	/^bezier::signed_curvature(const unsigned density,$/;"	f	class:bezier	typeref:typename:vector<point>
signed_curvature	cagd.cpp	/^cubic_spline::signed_curvature(int density)const{$/;"	f	class:cubic_spline	typeref:typename:vector<point>
solve_cyclic_tridiagonal_system	cagd.cpp	/^int cagd::solve_cyclic_tridiagonal_system($/;"	f	class:cagd	typeref:typename:int
solve_hform_tridiagonal_system_set_ctrl_pts	cagd.cpp	/^cubic_spline::solve_hform_tridiagonal_system_set_ctrl_pts($/;"	f	class:cubic_spline	typeref:typename:void
solve_tridiagonal_system	cagd.cpp	/^int cagd::solve_tridiagonal_system($/;"	f	class:cagd	typeref:typename:int
subdivision	cagd.cpp	/^bezier::subdivision(double t,bezier&left,bezier&right)const{$/;"	f	class:bezier	typeref:typename:void
uniform	cagd.h	/^uniform,$/;"	e	enum:cagd::cubic_spline::parametrization
write_control_points_in_postscript	cagd.cpp	/^bezier::write_control_points_in_postscript($/;"	f	class:bezier	typeref:typename:void
write_control_points_in_postscript	cagd.cpp	/^cubic_spline::write_control_points_in_postscript($/;"	f	class:cubic_spline	typeref:typename:void
write_control_points_in_postscript	cagd.cpp	/^piecewise_bezier_curve::write_control_points_in_postscript($/;"	f	class:piecewise_bezier_curve	typeref:typename:void
write_control_polygon_in_postscript	cagd.cpp	/^bezier::write_control_polygon_in_postscript($/;"	f	class:bezier	typeref:typename:void
write_control_polygon_in_postscript	cagd.cpp	/^cubic_spline::write_control_polygon_in_postscript($/;"	f	class:cubic_spline	typeref:typename:void
write_control_polygon_in_postscript	cagd.cpp	/^piecewise_bezier_curve::write_control_polygon_in_postscript($/;"	f	class:piecewise_bezier_curve	typeref:typename:void
write_curve_in_postscript	cagd.cpp	/^bezier::write_curve_in_postscript($/;"	f	class:bezier	typeref:typename:void
write_curve_in_postscript	cagd.cpp	/^cubic_spline::write_curve_in_postscript($/;"	f	class:cubic_spline	typeref:typename:void
write_curve_in_postscript	cagd.cpp	/^piecewise_bezier_curve::write_curve_in_postscript($/;"	f	class:piecewise_bezier_curve	typeref:typename:void
~bezier	cagd.cpp	/^bezier::~bezier(){$/;"	f	class:bezier
~cubic_spline	cagd.cpp	/^cubic_spline::~cubic_spline(){$/;"	f	class:cubic_spline
~curve	cagd.cpp	/^curve::~curve(){$/;"	f	class:curve
~piecewise_bezier_curve	cagd.cpp	/^piecewise_bezier_curve::~piecewise_bezier_curve(){}$/;"	f	class:piecewise_bezier_curve
~point	cagd.cpp	/^point::~point(){$/;"	f	class:point
